package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Sound is an autogenerated mock type for the Sound type
type Sound struct {
	mock.Mock
}

// Data provides a mock function with given fields: name
func (_m *Sound) Data(name string) (*ari.SoundData, error) {
	ret := _m.Called(name)

	var r0 *ari.SoundData
	if rf, ok := ret.Get(0).(func(string) *ari.SoundData); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.SoundData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: name
func (_m *Sound) Get(name string) ari.SoundHandle {
	ret := _m.Called(name)

	var r0 ari.SoundHandle
	if rf, ok := ret.Get(0).(func(string) ari.SoundHandle); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.SoundHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields: filters
func (_m *Sound) List(filters map[string]string) ([]ari.SoundHandle, error) {
	ret := _m.Called(filters)

	var r0 []ari.SoundHandle
	if rf, ok := ret.Get(0).(func(map[string]string) []ari.SoundHandle); ok {
		r0 = rf(filters)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.SoundHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(filters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
