package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// DeviceState is an autogenerated mock type for the DeviceState type
type DeviceState struct {
	mock.Mock
}

// Data provides a mock function with given fields: name
func (_m *DeviceState) Data(name string) (*ari.DeviceStateData, error) {
	ret := _m.Called(name)

	var r0 *ari.DeviceStateData
	if rf, ok := ret.Get(0).(func(string) *ari.DeviceStateData); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.DeviceStateData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name
func (_m *DeviceState) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *DeviceState) Get(name string) ari.DeviceStateHandle {
	ret := _m.Called(name)

	var r0 ari.DeviceStateHandle
	if rf, ok := ret.Get(0).(func(string) ari.DeviceStateHandle); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.DeviceStateHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *DeviceState) List() ([]ari.DeviceStateHandle, error) {
	ret := _m.Called()

	var r0 []ari.DeviceStateHandle
	if rf, ok := ret.Get(0).(func() []ari.DeviceStateHandle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.DeviceStateHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: name, state
func (_m *DeviceState) Update(name string, state string) error {
	ret := _m.Called(name, state)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(name, state)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
