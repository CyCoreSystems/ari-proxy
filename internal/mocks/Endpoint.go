package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Endpoint is an autogenerated mock type for the Endpoint type
type Endpoint struct {
	mock.Mock
}

// Data provides a mock function with given fields: tech, resource
func (_m *Endpoint) Data(tech string, resource string) (*ari.EndpointData, error) {
	ret := _m.Called(tech, resource)

	var r0 *ari.EndpointData
	if rf, ok := ret.Get(0).(func(string, string) *ari.EndpointData); ok {
		r0 = rf(tech, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.EndpointData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(tech, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: tech, resource
func (_m *Endpoint) Get(tech string, resource string) ari.EndpointHandle {
	ret := _m.Called(tech, resource)

	var r0 ari.EndpointHandle
	if rf, ok := ret.Get(0).(func(string, string) ari.EndpointHandle); ok {
		r0 = rf(tech, resource)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.EndpointHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Endpoint) List() ([]ari.EndpointHandle, error) {
	ret := _m.Called()

	var r0 []ari.EndpointHandle
	if rf, ok := ret.Get(0).(func() []ari.EndpointHandle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.EndpointHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListByTech provides a mock function with given fields: tech
func (_m *Endpoint) ListByTech(tech string) ([]ari.EndpointHandle, error) {
	ret := _m.Called(tech)

	var r0 []ari.EndpointHandle
	if rf, ok := ret.Get(0).(func(string) []ari.EndpointHandle); ok {
		r0 = rf(tech)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.EndpointHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(tech)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
