package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Bridge is an autogenerated mock type for the Bridge type
type Bridge struct {
	mock.Mock
}

// AddChannel provides a mock function with given fields: bridgeID, channelID
func (_m *Bridge) AddChannel(bridgeID string, channelID string) error {
	ret := _m.Called(bridgeID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bridgeID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: id, btype, name
func (_m *Bridge) Create(id string, btype string, name string) (ari.BridgeHandle, error) {
	ret := _m.Called(id, btype, name)

	var r0 ari.BridgeHandle
	if rf, ok := ret.Get(0).(func(string, string, string) ari.BridgeHandle); ok {
		r0 = rf(id, btype, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.BridgeHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, btype, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Data provides a mock function with given fields: id
func (_m *Bridge) Data(id string) (*ari.BridgeData, error) {
	ret := _m.Called(id)

	var r0 *ari.BridgeData
	if rf, ok := ret.Get(0).(func(string) *ari.BridgeData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.BridgeData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Bridge) Delete(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Bridge) Get(id string) ari.BridgeHandle {
	ret := _m.Called(id)

	var r0 ari.BridgeHandle
	if rf, ok := ret.Get(0).(func(string) ari.BridgeHandle); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.BridgeHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Bridge) List() ([]ari.BridgeHandle, error) {
	ret := _m.Called()

	var r0 []ari.BridgeHandle
	if rf, ok := ret.Get(0).(func() []ari.BridgeHandle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.BridgeHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Play provides a mock function with given fields: id, playbackID, mediaURI
func (_m *Bridge) Play(id string, playbackID string, mediaURI string) (ari.PlaybackHandle, error) {
	ret := _m.Called(id, playbackID, mediaURI)

	var r0 ari.PlaybackHandle
	if rf, ok := ret.Get(0).(func(string, string, string) ari.PlaybackHandle); ok {
		r0 = rf(id, playbackID, mediaURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.PlaybackHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, playbackID, mediaURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: id, name, opts
func (_m *Bridge) Record(id string, name string, opts *ari.RecordingOptions) (ari.LiveRecordingHandle, error) {
	ret := _m.Called(id, name, opts)

	var r0 ari.LiveRecordingHandle
	if rf, ok := ret.Get(0).(func(string, string, *ari.RecordingOptions) ari.LiveRecordingHandle); ok {
		r0 = rf(id, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.LiveRecordingHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *ari.RecordingOptions) error); ok {
		r1 = rf(id, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveChannel provides a mock function with given fields: bridgeID, channelID
func (_m *Bridge) RemoveChannel(bridgeID string, channelID string) error {
	ret := _m.Called(bridgeID, channelID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(bridgeID, channelID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: id, n
func (_m *Bridge) Subscribe(id string, n ...string) ari.Subscription {
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 ari.Subscription
	if rf, ok := ret.Get(0).(func(string, ...string) ari.Subscription); ok {
		r0 = rf(id, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}

	return r0
}
