package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"
import time "time"

// ChannelHandle is an autogenerated mock type for the ChannelHandle type
type ChannelHandle struct {
	mock.Mock
}

// Answer provides a mock function with given fields:
func (_m *ChannelHandle) Answer() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Busy provides a mock function with given fields:
func (_m *ChannelHandle) Busy() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Congestion provides a mock function with given fields:
func (_m *ChannelHandle) Congestion() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Continue provides a mock function with given fields: context, extension, priority
func (_m *ChannelHandle) Continue(context string, extension string, priority int) error {
	ret := _m.Called(context, extension, priority)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, int) error); ok {
		r0 = rf(context, extension, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields:
func (_m *ChannelHandle) Data() (*ari.ChannelData, error) {
	ret := _m.Called()

	var r0 *ari.ChannelData
	if rf, ok := ret.Get(0).(func() *ari.ChannelData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ChannelData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dial provides a mock function with given fields: caller, timeout
func (_m *ChannelHandle) Dial(caller string, timeout time.Duration) error {
	ret := _m.Called(caller, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, time.Duration) error); ok {
		r0 = rf(caller, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hangup provides a mock function with given fields:
func (_m *ChannelHandle) Hangup() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hold provides a mock function with given fields:
func (_m *ChannelHandle) Hold() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ID provides a mock function with given fields:
func (_m *ChannelHandle) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// IsAnswered provides a mock function with given fields:
func (_m *ChannelHandle) IsAnswered() (bool, error) {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MOH provides a mock function with given fields: mohClass
func (_m *ChannelHandle) MOH(mohClass string) error {
	ret := _m.Called(mohClass)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(mohClass)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Match provides a mock function with given fields: e
func (_m *ChannelHandle) Match(e ari.Event) bool {
	ret := _m.Called(e)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ari.Event) bool); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Mute provides a mock function with given fields: dir
func (_m *ChannelHandle) Mute(dir ari.Direction) error {
	ret := _m.Called(dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(ari.Direction) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Originate provides a mock function with given fields: req
func (_m *ChannelHandle) Originate(req ari.OriginateRequest) (ari.ChannelHandle, error) {
	ret := _m.Called(req)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(ari.OriginateRequest) ari.ChannelHandle); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ari.OriginateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Play provides a mock function with given fields: id, mediaURI
func (_m *ChannelHandle) Play(id string, mediaURI string) (ari.PlaybackHandle, error) {
	ret := _m.Called(id, mediaURI)

	var r0 ari.PlaybackHandle
	if rf, ok := ret.Get(0).(func(string, string) ari.PlaybackHandle); ok {
		r0 = rf(id, mediaURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.PlaybackHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(id, mediaURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: name, opts
func (_m *ChannelHandle) Record(name string, opts *ari.RecordingOptions) (ari.LiveRecordingHandle, error) {
	ret := _m.Called(name, opts)

	var r0 ari.LiveRecordingHandle
	if rf, ok := ret.Get(0).(func(string, *ari.RecordingOptions) ari.LiveRecordingHandle); ok {
		r0 = rf(name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.LiveRecordingHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *ari.RecordingOptions) error); ok {
		r1 = rf(name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ring provides a mock function with given fields:
func (_m *ChannelHandle) Ring() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendDTMF provides a mock function with given fields: dtmf, opts
func (_m *ChannelHandle) SendDTMF(dtmf string, opts *ari.DTMFOptions) error {
	ret := _m.Called(dtmf, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *ari.DTMFOptions) error); ok {
		r0 = rf(dtmf, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Silence provides a mock function with given fields:
func (_m *ChannelHandle) Silence() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snoop provides a mock function with given fields: snoopID, opts
func (_m *ChannelHandle) Snoop(snoopID string, opts *ari.SnoopOptions) (ari.ChannelHandle, error) {
	ret := _m.Called(snoopID, opts)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(string, *ari.SnoopOptions) ari.ChannelHandle); ok {
		r0 = rf(snoopID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *ari.SnoopOptions) error); ok {
		r1 = rf(snoopID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopHold provides a mock function with given fields:
func (_m *ChannelHandle) StopHold() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopMOH provides a mock function with given fields:
func (_m *ChannelHandle) StopMOH() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopRing provides a mock function with given fields:
func (_m *ChannelHandle) StopRing() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopSilence provides a mock function with given fields:
func (_m *ChannelHandle) StopSilence() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: n
func (_m *ChannelHandle) Subscribe(n ...string) ari.Subscription {
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 ari.Subscription
	if rf, ok := ret.Get(0).(func(...string) ari.Subscription); ok {
		r0 = rf(n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}

	return r0
}

// Unmute provides a mock function with given fields: dir
func (_m *ChannelHandle) Unmute(dir ari.Direction) error {
	ret := _m.Called(dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(ari.Direction) error); ok {
		r0 = rf(dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Variables provides a mock function with given fields:
func (_m *ChannelHandle) Variables() ari.Variables {
	ret := _m.Called()

	var r0 ari.Variables
	if rf, ok := ret.Get(0).(func() ari.Variables); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Variables)
		}
	}

	return r0
}
