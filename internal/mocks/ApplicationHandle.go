package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// ApplicationHandle is an autogenerated mock type for the ApplicationHandle type
type ApplicationHandle struct {
	mock.Mock
}

// Data provides a mock function with given fields:
func (_m *ApplicationHandle) Data() (*ari.ApplicationData, error) {
	ret := _m.Called()

	var r0 *ari.ApplicationData
	if rf, ok := ret.Get(0).(func() *ari.ApplicationData); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ApplicationData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ID provides a mock function with given fields:
func (_m *ApplicationHandle) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Match provides a mock function with given fields: evt
func (_m *ApplicationHandle) Match(evt ari.Event) bool {
	ret := _m.Called(evt)

	var r0 bool
	if rf, ok := ret.Get(0).(func(ari.Event) bool); ok {
		r0 = rf(evt)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Subscribe provides a mock function with given fields: eventSource
func (_m *ApplicationHandle) Subscribe(eventSource string) error {
	ret := _m.Called(eventSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Unsubscribe provides a mock function with given fields: eventSource
func (_m *ApplicationHandle) Unsubscribe(eventSource string) error {
	ret := _m.Called(eventSource)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(eventSource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
