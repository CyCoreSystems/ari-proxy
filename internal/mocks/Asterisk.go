package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Asterisk is an autogenerated mock type for the Asterisk type
type Asterisk struct {
	mock.Mock
}

// Config provides a mock function with given fields:
func (_m *Asterisk) Config() ari.Config {
	ret := _m.Called()

	var r0 ari.Config
	if rf, ok := ret.Get(0).(func() ari.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Config)
		}
	}

	return r0
}

// Info provides a mock function with given fields: only
func (_m *Asterisk) Info(only string) (*ari.AsteriskInfo, error) {
	ret := _m.Called(only)

	var r0 *ari.AsteriskInfo
	if rf, ok := ret.Get(0).(func(string) *ari.AsteriskInfo); ok {
		r0 = rf(only)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.AsteriskInfo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(only)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logging provides a mock function with given fields:
func (_m *Asterisk) Logging() ari.Logging {
	ret := _m.Called()

	var r0 ari.Logging
	if rf, ok := ret.Get(0).(func() ari.Logging); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Logging)
		}
	}

	return r0
}

// Modules provides a mock function with given fields:
func (_m *Asterisk) Modules() ari.Modules {
	ret := _m.Called()

	var r0 ari.Modules
	if rf, ok := ret.Get(0).(func() ari.Modules); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Modules)
		}
	}

	return r0
}

// ReloadModule provides a mock function with given fields: name
func (_m *Asterisk) ReloadModule(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Variables provides a mock function with given fields:
func (_m *Asterisk) Variables() ari.Variables {
	ret := _m.Called()

	var r0 ari.Variables
	if rf, ok := ret.Get(0).(func() ari.Variables); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Variables)
		}
	}

	return r0
}
