package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Mailbox is an autogenerated mock type for the Mailbox type
type Mailbox struct {
	mock.Mock
}

// Data provides a mock function with given fields: name
func (_m *Mailbox) Data(name string) (*ari.MailboxData, error) {
	ret := _m.Called(name)

	var r0 *ari.MailboxData
	if rf, ok := ret.Get(0).(func(string) *ari.MailboxData); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.MailboxData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: name
func (_m *Mailbox) Delete(name string) error {
	ret := _m.Called(name)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: name
func (_m *Mailbox) Get(name string) ari.MailboxHandle {
	ret := _m.Called(name)

	var r0 ari.MailboxHandle
	if rf, ok := ret.Get(0).(func(string) ari.MailboxHandle); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.MailboxHandle)
		}
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Mailbox) List() ([]ari.MailboxHandle, error) {
	ret := _m.Called()

	var r0 []ari.MailboxHandle
	if rf, ok := ret.Get(0).(func() []ari.MailboxHandle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.MailboxHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: name, oldMessages, newMessages
func (_m *Mailbox) Update(name string, oldMessages int, newMessages int) error {
	ret := _m.Called(name, oldMessages, newMessages)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, int, int) error); ok {
		r0 = rf(name, oldMessages, newMessages)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
