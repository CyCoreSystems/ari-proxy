package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Channel is an autogenerated mock type for the Channel type
type Channel struct {
	mock.Mock
}

// Answer provides a mock function with given fields: id
func (_m *Channel) Answer(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Busy provides a mock function with given fields: id
func (_m *Channel) Busy(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Congestion provides a mock function with given fields: id
func (_m *Channel) Congestion(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Continue provides a mock function with given fields: id, context, extension, priority
func (_m *Channel) Continue(id string, context string, extension string, priority int) error {
	ret := _m.Called(id, context, extension, priority)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, int) error); ok {
		r0 = rf(id, context, extension, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Create provides a mock function with given fields: _a0
func (_m *Channel) Create(_a0 ari.ChannelCreateRequest) (ari.ChannelHandle, error) {
	ret := _m.Called(_a0)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(ari.ChannelCreateRequest) ari.ChannelHandle); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ari.ChannelCreateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Data provides a mock function with given fields: id
func (_m *Channel) Data(id string) (*ari.ChannelData, error) {
	ret := _m.Called(id)

	var r0 *ari.ChannelData
	if rf, ok := ret.Get(0).(func(string) *ari.ChannelData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.ChannelData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Dial provides a mock function with given fields: id, caller, timeout
func (_m *Channel) Dial(id string, caller string, timeout time.Duration) error {
	ret := _m.Called(id, caller, timeout)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, time.Duration) error); ok {
		r0 = rf(id, caller, timeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: id
func (_m *Channel) Get(id string) ari.ChannelHandle {
	ret := _m.Called(id)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(string) ari.ChannelHandle); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	return r0
}

// Hangup provides a mock function with given fields: id, reason
func (_m *Channel) Hangup(id string, reason string) error {
	ret := _m.Called(id, reason)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, reason)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Hold provides a mock function with given fields: id
func (_m *Channel) Hold(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// List provides a mock function with given fields:
func (_m *Channel) List() ([]ari.ChannelHandle, error) {
	ret := _m.Called()

	var r0 []ari.ChannelHandle
	if rf, ok := ret.Get(0).(func() []ari.ChannelHandle); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MOH provides a mock function with given fields: id, moh
func (_m *Channel) MOH(id string, moh string) error {
	ret := _m.Called(id, moh)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, moh)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Mute provides a mock function with given fields: id, dir
func (_m *Channel) Mute(id string, dir ari.Direction) error {
	ret := _m.Called(id, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ari.Direction) error); ok {
		r0 = rf(id, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Originate provides a mock function with given fields: _a0
func (_m *Channel) Originate(_a0 ari.OriginateRequest) (ari.ChannelHandle, error) {
	ret := _m.Called(_a0)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(ari.OriginateRequest) ari.ChannelHandle); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(ari.OriginateRequest) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Play provides a mock function with given fields: id, playbackID, mediaURI
func (_m *Channel) Play(id string, playbackID string, mediaURI string) (ari.PlaybackHandle, error) {
	ret := _m.Called(id, playbackID, mediaURI)

	var r0 ari.PlaybackHandle
	if rf, ok := ret.Get(0).(func(string, string, string) ari.PlaybackHandle); ok {
		r0 = rf(id, playbackID, mediaURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.PlaybackHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(id, playbackID, mediaURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Record provides a mock function with given fields: id, name, opts
func (_m *Channel) Record(id string, name string, opts *ari.RecordingOptions) (ari.LiveRecordingHandle, error) {
	ret := _m.Called(id, name, opts)

	var r0 ari.LiveRecordingHandle
	if rf, ok := ret.Get(0).(func(string, string, *ari.RecordingOptions) ari.LiveRecordingHandle); ok {
		r0 = rf(id, name, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.LiveRecordingHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *ari.RecordingOptions) error); ok {
		r1 = rf(id, name, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Ring provides a mock function with given fields: id
func (_m *Channel) Ring(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SendDTMF provides a mock function with given fields: id, dtmf, opts
func (_m *Channel) SendDTMF(id string, dtmf string, opts *ari.DTMFOptions) error {
	ret := _m.Called(id, dtmf, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, *ari.DTMFOptions) error); ok {
		r0 = rf(id, dtmf, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Silence provides a mock function with given fields: id
func (_m *Channel) Silence(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Snoop provides a mock function with given fields: id, snoopID, opts
func (_m *Channel) Snoop(id string, snoopID string, opts *ari.SnoopOptions) (ari.ChannelHandle, error) {
	ret := _m.Called(id, snoopID, opts)

	var r0 ari.ChannelHandle
	if rf, ok := ret.Get(0).(func(string, string, *ari.SnoopOptions) ari.ChannelHandle); ok {
		r0 = rf(id, snoopID, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.ChannelHandle)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *ari.SnoopOptions) error); ok {
		r1 = rf(id, snoopID, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StopHold provides a mock function with given fields: id
func (_m *Channel) StopHold(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopMOH provides a mock function with given fields: id
func (_m *Channel) StopMOH(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopRing provides a mock function with given fields: id
func (_m *Channel) StopRing(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// StopSilence provides a mock function with given fields: id
func (_m *Channel) StopSilence(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: id, n
func (_m *Channel) Subscribe(id string, n ...string) ari.Subscription {
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 ari.Subscription
	if rf, ok := ret.Get(0).(func(string, ...string) ari.Subscription); ok {
		r0 = rf(id, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}

	return r0
}

// Unmute provides a mock function with given fields: id, dir
func (_m *Channel) Unmute(id string, dir ari.Direction) error {
	ret := _m.Called(id, dir)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, ari.Direction) error); ok {
		r0 = rf(id, dir)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Variables provides a mock function with given fields: id
func (_m *Channel) Variables(id string) ari.Variables {
	ret := _m.Called(id)

	var r0 ari.Variables
	if rf, ok := ret.Get(0).(func(string) ari.Variables); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Variables)
		}
	}

	return r0
}
