package mocks

import ari "github.com/CyCoreSystems/ari"
import mock "github.com/stretchr/testify/mock"

// Playback is an autogenerated mock type for the Playback type
type Playback struct {
	mock.Mock
}

// Control provides a mock function with given fields: id, op
func (_m *Playback) Control(id string, op string) error {
	ret := _m.Called(id, op)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(id, op)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Data provides a mock function with given fields: id
func (_m *Playback) Data(id string) (*ari.PlaybackData, error) {
	ret := _m.Called(id)

	var r0 *ari.PlaybackData
	if rf, ok := ret.Get(0).(func(string) *ari.PlaybackData); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ari.PlaybackData)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Get provides a mock function with given fields: id
func (_m *Playback) Get(id string) ari.PlaybackHandle {
	ret := _m.Called(id)

	var r0 ari.PlaybackHandle
	if rf, ok := ret.Get(0).(func(string) ari.PlaybackHandle); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.PlaybackHandle)
		}
	}

	return r0
}

// Stop provides a mock function with given fields: id
func (_m *Playback) Stop(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: id, n
func (_m *Playback) Subscribe(id string, n ...string) ari.Subscription {
	_va := make([]interface{}, len(n))
	for _i := range n {
		_va[_i] = n[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 ari.Subscription
	if rf, ok := ret.Get(0).(func(string, ...string) ari.Subscription); ok {
		r0 = rf(id, n...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(ari.Subscription)
		}
	}

	return r0
}
